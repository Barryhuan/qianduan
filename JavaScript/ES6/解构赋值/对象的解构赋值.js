// 对象的解构赋值是专门为了解构对象的

// 1.一般形式 ----------------------------------------------------------------------------------------------------

let {a1, a2, a3} = {a1: 1, a2: 2, a3: 3}
a1 // 1
a2 // 2
a3 // 3

// 对象的解构赋值机制
// 一般b1, b2, b3会从对象中查找同名的属性，并将值赋给右边的变量，也就是 b1:b1, (左边的b1)会从对象中查找同名的属性，并将找到值赋给(右边的变量b1)
// 也就是说，对象的解构赋值的内部机制，是先找到同名属性，然后再赋给对应的变量。真正被赋值的是后者，而不是前者。
// 这是一种匹配模式，左边的b1
// 一般这种形式简化就是上面的代码↑
let {b1: b1, b2: b2, b3: b3} = {b1: 1, b2: 2, b3: 3}

b1 // 1
b2 // 2
b3 // 3

// 另一种情况 ----------------------------------------------------------------------------------------------------

let {c1: a, c2: b, c3: c} = {c1: 1, c2: 2, c3: 3}

// console.log(c1, c2, c3) // 这样c1，c2，c3会出现undefined

a // 1
b // 2
c // 3


// 对象的嵌套解构 ----------------------------------------------------------------------------------------------------
// 例子1
let obj = {
    p: [
        'p1',
        'p2',
        'p3'
    ]
}

let {p, p: [p1, p2, p3]} = obj

console.log(p)
console.log(p1, p2, p3)
p // ['p1', 'p2', 'p3']
p1 // 'p1'
p2 // 'p2'
p3 // 'p3'

// 例子2
let node = {
    loc: {
        str: {
            name: '老王',
            age: 20
        }
    }
}

let {loc, loc: { str }, loc: { str : { name } }} = node

loc // { str: { name: '老王', age: 20 } }
str // { name: '老王', age: 20 }
name // 老王


// 提前声明变量也可以嵌套获取对象属性 ----------------------------------------------------------------------------------------------------
// 要为表达式添加一个圆括号才能成立
let obj1 = {};
let arr = [];

({foo: obj1.name, zoo: arr[0]} = {foo: '老王', zoo: true})

obj1.name // '老王'
arr[0] // [true]


// 对象的解构赋值也可以获取对象的继承属性

let obj2 = {}
let obj3 = { name1: '老王', age1: 20}

// 这是个为对象设置原型的方法，参数1：要设置的对象， 参数2：原型对象
Object.setPrototypeOf(obj2, obj3)

let {name1, age1} = obj2
name1 // '老王'
age1 // 20


// 对象解构赋值也跟数组一样，当值为undefined默认值才起作用


// 对象解构赋值也可以添加默认值

let {x = 3, y =4 } = {}
x // 3
y // 4

let { x, y = 4 } = { x: 3 }
console.log(x, y)
x // 3
y // 4

let {x: y = 4} = {}
y // 4

let {x: y = 3 } = {x: 10}
y // 10


// 对象解构可以解构数组，因为数组也是个对象，反过来就不行了----------------------------------------------------------------------------------------------------
// 属性名是索引
let array = [1, 2, 3]

let {0: array1, [array.length - 1]: array3} = array

array1 // 1
array3 // 3


// 注意点:圆括号的使用方式
// 先声明一个g变量
let g

// {g} = {g: '555'}
// console.log(g)
// 这里不给最外面添加圆括号会报错


({g} = {g: '555'})
console.log(g)
// 添加圆括号就可以了，g：'555'


