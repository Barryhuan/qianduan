// 1.交换变量的值 ------------------------------------------------------------------------------------------------------------------------------

let x = 1
let y = 2

// [x, y] = [y, x]
x // 2
y // 1

// 上面代码交换变量x和y的值，这样的写法不仅简洁，而且易读，语义非常清晰


// 2.从函数返回多个值 ------------------------------------------------------------------------------------------------------------------------------
// 函数只能返回一个值，如果要返回多个值，只能将它们放在数组或对象里返回。有了解构赋值，取出这些值就非常方便。

function example() {
    return [1, 2, 3]
}

let [a, b, c] = example()
a // 1
b // 2
c // 3 
// 返回一个对象

function example() {
    return {
        foo: 1,
        bar: 2
    };
}
let { foo, bar } = example()

foo // 1
bar // 2


// 3.函数参数的定义------------------------------------------------------------------------------------------------------------------------------
// 解构赋值可以方便地将一组参数与变量名对应起来

// 参数是一组有次序的值
function f([x, y, z]) {
    return x + y + z
}
f([1, 2, 3]);

// 6


// 参数是一组无次序的值
function f({ x, y, z }) {
    return x + y + z
}

f({ z: 3, y: 2, x: 1 });

// 6

// 4.函数参数的默认值 ------------------------------------------------------------------------------------------------------------------------------

jQuery.ajax = function (url, {
    async = true,
    beforeSend = function () {},
    cache = true,
    complete = function () {},
    crossDomain = false,
    global = true,
    // ... more config
  } = {}) {
    // ... do stuff
  };

// 指定参数的默认值，就避免了在函数体内部再写var foo = config.foo || 'default foo';这样的语句。


// 5.提取 JSON 数据 ------------------------------------------------------------------------------------------------------------------------------
// 其实也就是提取对象的属性和值
let jsonData = {
    id: 42,
    status: "OK",
    data: [867, 5309]
};

let { id, status, data: number } = jsonData;

// console.log(id, status, number);
// 42, "OK", [867, 5309]

// 6.遍历 Map 结构------------------------------------------------------------------------------------------------------------------------------
// 任何部署了 Iterator 接口的对象，都可以用for...of循环遍历。Map 结构原生支持 Iterator 接口，配合变量的解构赋值，获取键名和键值就非常方便。 

const maps = new Map()
maps.set('first', 'hello')
maps.set('second', 'world')

for (let [key, value] of maps) {
    console.log(key + 'is' + value)
}

// first is hello
// second is world

// 7.输入模块的指定方法 ------------------------------------------------------------------------------------------------------------------------------

const { SourceMapConsumer, SourceNode } = require("source-map");