// 不能使用圆括号的情况

// 第一种：变量声明语句

// let [(a)] = [1];
// let {x: (c)} = {};
// let ({x: c}) = {};
// let {(x: c)} = {};
// let {(x): c} = {};
// let { o: ({ p: p }) } = { o: { p: 2 } };

// 会报错，因为它们都是变量声明语句，模式不能使用圆括号。

// 第二种：函数参数

// function f([(z)]) { return z; }
// function f([z,(x)]) { return x; }

// 函数参数也属于变量声明，因此不能带有圆括号

// 第三种：赋值语句

// ({ p: a }) = { p: 42 };
// ([a]) = [5];

// 上面代码将整个模式放在圆括号之中，导致报错

// [({ p: a }), { x: c }] = [{}, {}];

// 上面代码将一部分模式放在圆括号之中，导致报错。


// 可以使用圆括号的情况
// 赋值语句的非模式部分，可以使用圆括号。
[(b)] = [3]; // 正确 // 错误的类似代码：([a]) = [5]; 括号在外面报错，在里面正确
({ p: (d) } = {}); // 正确  // 错误的类似代码：({ p: a }) = { p: 42 }; 
[(parseInt.prop)] = [3]; // 正确 


// 上面三行语句都可以正确执行，因为首先它们都是赋值语句，而不是声明语句；其次它们的圆括号都不属于模式的一部分
// 第一行语句中，模式是取数组的第一个成员，跟圆括号无关；
// 第二行语句中，模式是p，而不是d；
// 第三行语句与第一行语句的性质一致。
// 所以一般不要使用解构赋值的时候使用圆括号