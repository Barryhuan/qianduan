## 源码分析

### 数据代理
定义：通过一个对象代理对另一个对象（这个对象在前一个对象的内部）的属性操作（读/写）

vue数据代理：通过new Vue对象对内部的data对象属性进行操作

作用：更好管理和调用data里的数据

实现的基本流程：

1. 创建变量获取传入来的data对象

2. 利用Object.keys(data).forEach方法转化为字符串数组并调用遍历属性

3. _proxy(key)接收变量名，并调用Object.defineProperty()改变属性特性，并监控属性值的变化

### 模板分析

* #### 花括号{{}}
  1. 为vm对象添加compile编译属性,并传入当前的node节点
  2. 创建fragment遍历存储节点，页面节点消失
  3. 调用init()编译文本节点，通过data【属性名】获取属性值，并添加到花括号里
  4. 把内存中编译好的节点添加到文档上
* #### 事件指令

  1. 判断是否为元素节点
  2. 判断节点是否有属性节点
  3. 判断属性节点的属性名是否为v-开头
  4. 判断属性节点的属性名是否有on
  5. 获取属性节点表达式的methods中的函数和事件类型
  6. 绑定事件监听（实现v-on：click指令的实现）
  7. 清除页面中的指令

* #### 普通指令
  1. 获取指令名和指令表达式
  2. 通过指令表达式从data中获取值
  3. 通过指令名（text/html/model）进行不同的操作
  4. 清除页面中的指令

### 数据绑定

* 什么是数据绑定

    一旦更新data中的某个属性数据时，页面上直接或间接使用改属性的节点会进行更新

* 什么是数据劫持

    数据劫持是实现数据绑定的实现手段，通过对data中的所有层次的属性调用definedProperty方法，对属性进行监听（读get/写set）

* 实现数据绑定的四个重要对象
    1. Observe(实现对属性的劫持，并创建Dep属性)
        * 在程序初始化时，对data里的属性进行数据劫持，并创建Dep对象以用来后后面存储watcher，用来通知订阅者（watcher）
        * 在get方法中，设置了初始化时，watcher创建，从data中获取数据，并以Dep建立联系
        * 在set方法中，一旦对属性进行更新，就通知watcher订阅者进行更新，watcher就会去（读）当前的这个属性，然后就会调用Obseve中的get方法获取当前最新的属性值

    2. Dep(发布者，通知订阅者改变表达式里的数据)
        * 作用：Dep是用来存储当前属性有多少个表达式的

        * 什么时候创建
          当Observe对属性进行劫持的时候创建

        * 有多少个
          每个属性都有一个(都有唯一标识)，但可以有多个watcher对象，也就是表达式（不包括事件表达式）

        * 与Watcher什么时候创建联系
          当watcher创建后，从data中读取数据时会与Dep建立联系，互相存值

        * 创建联系后的关系
          当data里的属性进行更新后，Observe的set()会调用Dep的方法去通知Watcher更新表达式里的数据

    3. Compile(编译模板指令)
        * 这里主要是bind方法里创建Watcher对象，并为Watcher指定更新页面节点的方法

    4. Watcher(订阅者，更新表达式里的数据)
        * 作用：存储表达式里的属性，并对其进行更新

        * 什么时候创建的
          当编译模板的时候创建
        * 有多少个
          每个属性都有多个表达式，但对多个对象多个对象：如  a: { b: 'b' }，一个watcher会有多个

        * 与Dep什么时候创建订阅者关系
          当data里的属性进行更新时，会调用Dep的方法通知Wathcer进行更新


## 数据绑定示意图
![示意图](F:\前端\练习\Vue练习\源码分析\原理图.png)

### 执行顺序
* 创建MVVM对象，并创建data属性
* 使用Observe监听data里所有层次里属性进行数据劫持
* 在Observe里创建Dep对象
* 调用Compile编译模板，初始化视图
* 创建Watcher对象进行真正编译模板，将表达式里的属性从data里获取
* 当Watcher从data里获取属性时，就会调用get方法，与Dep创建联系,双方互存数据
* 当Wathcer获取到属性值时，会调用Compile为Watcher指定的更新页面的方法，将页面里表达式的数据更新，页面初始化完成
* ---------------------------  初始完成 ---------------------------
* 当data里的数值发生改变时，调用Observe的set方法，让Dep的通知Watcher更新页面